package lessons.week10.dp;

/**
 * @version 1.0
 * @Description: 动态规划总结
 * @author: bingyu
 * @date: 2023/2/19
 */
public class Summary {

    /*
      需要掌握模型举一反三
      DP专题
       1.适用问题: 动态规划适合"回溯+存在重复子问题(重复状态)"(回溯适合解决穷举问题)

       2.解题步骤: (见example1和example2)
         (1). 可用回溯解决: 需要穷举搜索才能得到结果的问题(最值、可行、计数等)
         (2). 构建多阶段决策模型。 看是否能将问题求解的过程分为多个阶段。
         (3). 查看是否存在重复子问题: 是否有多个路径到达同一个状态。
         (4). TODO 定义状态: 也就是如何记录每一阶段的不同状态。
         (5). TODO 定义状态转移方程: 也就是找到如何通过上一阶段的状态推导出下一阶段的状态。
         (6). 画状态转移表: 辅助理解，验证正确性，确定状态转移的初始值。
         (7). 编写动态规划代码
         黄色标记的两个步骤是难点，掌握的技巧就是: 记忆经典模型的状态和状态转移方程的定义方法，举一反三。


       3.最值、可行、计数三种类型  一些特殊小类别:树形DP、区间DP、数位DP(具体问题见example)
         (1).有n个物品，选择其中一些物品装入背包，在不超过背包最大重量限制的前提下，背包中可装物品的总重量的最大值是多少?(最值问题--见example1)
         (2).有n个物品，选择其中一些物品装入背包，能不能正好装满背包?(可行性问题--见example3)
         (3).有n个物品，选择其中一些物品装入背包，正好装满背包所需物品最少个数是多少?如果装不满，返回-1 (最值问题--见example4)
         (4).有n个物品，选择其中一些物品装入背包，装满背包有多少种不同的装法?(计数问题---见example5)

       4.空间优化
         其实我们不需要用n行二维数组来存储状态，我们只需要保存两行就行，一行是上一阶段，一行是当前阶段，执行完后，再将上一行
         作为当前阶段，下一行作为下一阶段处理,这样我们永远只需要2行来存储状态即可!(因为最终决策完都是在最后一行，所有结果均在最后一行得到)
         TODO: "0-1背包问题"的空间优化见example6，要注意的是这个空间优化主要是对0背包问题比较有效，如果是其他模型，就不一定可行了!
               "完全背包问题"的空间优化见


 TODO：5.还要注意一点的是关于背包问题中的一个细节是，我们是外层循环遍历weight[i]中的物品，内层循环遍历背包可以容纳的重量，
       还是外层循环遍历背包可容纳的重量，内层循环再遍历weight[i]中的物品?
       答: 这要根据题意来，对于0-1背包的问题，两层循环顺序是可以随意颠倒的，对于其它问题如果不是问的组合数，放在背包容量哪一层遍历都可以，
       但是一旦题目要求的是得到组合数目，则两层循环就不能随便放位置了;

       背包问题里，两个for循环的先后循序是非常有讲究的，理解遍历顺序其实比理解推导公式难多了

     经典模型:
      1.背包问题
      2.路径问题
      3.打家劫舍&股票买卖
      爬楼梯问题
      匹配问题(LCS、编辑距离)
      其他(LIS)
    */

}
