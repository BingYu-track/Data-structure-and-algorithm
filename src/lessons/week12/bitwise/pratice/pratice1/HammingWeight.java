 package lessons.week12.bitwise.pratice.pratice1;



/**
 * @version 1.0 位1的个数
 * @Description: 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 *
 * 提示：
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，
 * 因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，
 * 在示例 3中，输入表示有符号整数 -3。
 *
 *
 * 示例 1：
 * 输入：n = 00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011中，共有三位为 '1'。
 *
 * 示例 2：
 * 输入：n = 00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000中，共有一位为 '1'。
 *
 * 示例 3：
 * 输入：n = 11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *
 * 提示：
 * 输入必须是长度为 32 的 二进制串 。
 * 进阶：
 * 如果多次调用这个函数，你将如何优化你的算法？
 * @author: bingyu
 * @date: 2023/8/2
 */
public class HammingWeight {

     public static void main(String[] args) {
         HammingWeight hw = new HammingWeight();
         int num = -3;
         int res = hw.hammingWeight(num);
         System.out.println(res);
     }

     /*
      思路: 向将数字转成二进制数组，然后再统计1的个数
      执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
      内存消耗：38.4 MB, 在所有 Java 提交中击败了66.13%的用户
     */
     public int hammingWeight(int n) {
         int cons = 1;
         int count = 0;
         for (int i = 31;i>=0;i--) {
             if ((n & cons)!=0) {
                 count++;
             }
             cons <<= 1;
         }
         return count;
     }
}
