package lessons.week9.pratice.dfsbfs;

/**
 * @version 1.0
 * @Description: 深度和广度优先遍历
 * @author: bingyu
 * @date: 2023/2/19
 */
public class Summary {


    /*
     一、图的相关概念和算法简介
       1.图的几个常用概念介绍
         顶点
         边: 2个顶点之间有边
         无向图: 边是没有方向的图
         有向图: 边是有方向的图
         有权图: 边是有权重值的图
         度: 一个顶点相连接的边的个数就是度数
         入度: 在有向图中箭头指向一个顶点的边的个数，是这个顶点的入度
         出度: 在有向图中箭头指出一个顶点的边的个数，是这个顶点的出度
            a.无向无权图
         (0)-------(2)
          |         |
          |         |
         (1)-------(3)


            b.无向有权图
         (0)---2---(2)
          |         |
          3         3
          |         |
         (1)---5---(3)

            c.有向无权图
        (0)<------(2)
         |         ↑
         |         |
         V         |
        (1)------>(3)


            d.有向有权图
         (0)<--2---(2)
          |         ↑
          3         |
          |         3
          V         |
         (1)---5-->(3)
            有向有权图

        TODO  注意: 树是图的一种特殊情况，因为树也有顶点和边


       2.图的两种存储方式: 邻接矩阵和邻接表
          TODO  邻接矩阵 :  用二维数组的方式，来表示图

                    a.无向图邻接矩阵的存储方式
                      0   1    2   3
                   0 ['0','1','1','0']
                   1 ['1','0','0','1']
                   2 ['1','0','0','1']
                   3 ['0','1','1','0']
                  用布尔类型的二维数组boolean[][]表示,在无向图中arr[i][j]表示顶点i<-->j之间的关系，arr[i][j]=true和arr[j][i]表示
                  顶点i和顶点j之间有边，且为无向边，如上图arr[0][2]=true并且arr[2][0]=true表示顶点0和2之间有边


                b.有向有权图邻接矩阵的存储方式
                    0   1    2   3
                0 ['0','3','0','0']
                1 ['0','0','5','0']
                2 ['2','0','0','0']
                3 ['0','0','3','0']
                用int类型的二维数组int[][]表示，在有向图中arr[i][j]表示顶点i-->j之间的关系，arr[i][j]=k并且arr[j][i]=0表示从i指向j的
                一个边，权重是k。
                如上图arr[0][2]=0并且arr[2][0]=2说明顶点0和顶点2之间的边，方向是从顶点2出发指向0，边的权重是2


          TODO 邻接表: 和哈希表有点相似，假设一个顶点A和n个顶点相连，那么在这个顶点后面拉n个节点长度的链表
                  a.无向图的邻接表的存储方式
               数组
               [0]-->[1| ]-->[2| ]-->null    顶点0和1、2顶点相连，因此后面跟1,2个节点，形成一个链表
               |1]-->[0| ]-->[3| ]-->null
               [2]-->[0| ]-->[3| ]-->null
               [3]-->[1| ]-->[2| ]-->null

                 b.有向有权图的邻接表的存储方式
             [0]-->[1|3| ]-->null   顶点0和顶点1，从0出发指向1，权重是3
             |1]-->[3|5| ]-->null
             [2]-->[0|2| ]-->null
             [3]-->[2|3| ]-->null

       3.图上的算法


     二、广度/深度优先搜索/遍历


     */
}
